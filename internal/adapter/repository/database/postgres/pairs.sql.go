// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pairs.sql

package postgres

import (
	"context"
)

const countPairs = `-- name: CountPairs :one
select count(*) from pairs
`

func (q *Queries) CountPairs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPairs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllPairs = `-- name: GetAllPairs :many
select symbol, base_asset, quote_asset, created_at from pairs
`

func (q *Queries) GetAllPairs(ctx context.Context) ([]Pair, error) {
	rows, err := q.db.Query(ctx, getAllPairs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pair
	for rows.Next() {
		var i Pair
		if err := rows.Scan(
			&i.Symbol,
			&i.BaseAsset,
			&i.QuoteAsset,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPair = `-- name: GetPair :one
select symbol, base_asset, quote_asset, created_at from pairs where symbol = $1
`

func (q *Queries) GetPair(ctx context.Context, symbol string) (Pair, error) {
	row := q.db.QueryRow(ctx, getPair, symbol)
	var i Pair
	err := row.Scan(
		&i.Symbol,
		&i.BaseAsset,
		&i.QuoteAsset,
		&i.CreatedAt,
	)
	return i, err
}

const hasPair = `-- name: HasPair :one
select exists(select symbol, base_asset, quote_asset, created_at from pairs where symbol = $1)
`

func (q *Queries) HasPair(ctx context.Context, symbol string) (bool, error) {
	row := q.db.QueryRow(ctx, hasPair, symbol)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
