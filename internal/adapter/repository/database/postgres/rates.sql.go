// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rates.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const getRate = `-- name: GetRate :one
select id, price, pair, provider, ts, created_at from rates where ts = $1 and pair = $2 limit 1
`

type GetRateParams struct {
	Ts   pgtype.Timestamp
	Pair string
}

func (q *Queries) GetRate(ctx context.Context, arg GetRateParams) (Rate, error) {
	row := q.db.QueryRow(ctx, getRate, arg.Ts, arg.Pair)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Pair,
		&i.Provider,
		&i.Ts,
		&i.CreatedAt,
	)
	return i, err
}

const hasRate = `-- name: HasRate :one
select exists(select id, price, pair, provider, ts, created_at from rates where ts = $1 and pair = $2)
`

type HasRateParams struct {
	Ts   pgtype.Timestamp
	Pair string
}

func (q *Queries) HasRate(ctx context.Context, arg HasRateParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasRate, arg.Ts, arg.Pair)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const saveRate = `-- name: SaveRate :one
insert into rates(price, pair, provider, ts) values ($1, $2, $3, $4) returning id, price, pair, provider, ts, created_at
`

type SaveRateParams struct {
	Price    decimal.Decimal
	Pair     string
	Provider string
	Ts       pgtype.Timestamp
}

func (q *Queries) SaveRate(ctx context.Context, arg SaveRateParams) (Rate, error) {
	row := q.db.QueryRow(ctx, saveRate,
		arg.Price,
		arg.Pair,
		arg.Provider,
		arg.Ts,
	)
	var i Rate
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Pair,
		&i.Provider,
		&i.Ts,
		&i.CreatedAt,
	)
	return i, err
}
