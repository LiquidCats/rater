// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RateCache is an autogenerated mock type for the RateCache type
type RateCache struct {
	mock.Mock
}

// GetRate provides a mock function with given fields: ctx, pair
func (_m *RateCache) GetRate(ctx context.Context, pair entity.Pair) (*entity.Rate, error) {
	ret := _m.Called(ctx, pair)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 *entity.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pair) (*entity.Rate, error)); ok {
		return rf(ctx, pair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pair) *entity.Rate); ok {
		r0 = rf(ctx, pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Pair) error); ok {
		r1 = rf(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRate provides a mock function with given fields: ctx, rate, expire
func (_m *RateCache) PutRate(ctx context.Context, rate entity.Rate, expire time.Duration) error {
	ret := _m.Called(ctx, rate, expire)

	if len(ret) == 0 {
		panic("no return value specified for PutRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Rate, time.Duration) error); ok {
		r0 = rf(ctx, rate, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRateCache creates a new instance of RateCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateCache {
	mock := &RateCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
