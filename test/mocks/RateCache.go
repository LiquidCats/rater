// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LiquidCats/rater/internal/adapter/repository/cache/redis"
	mock "github.com/stretchr/testify/mock"
)

// NewRateCache creates a new instance of RateCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateCache {
	mock := &RateCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RateCache is an autogenerated mock type for the RateCache type
type RateCache struct {
	mock.Mock
}

type RateCache_Expecter struct {
	mock *mock.Mock
}

func (_m *RateCache) EXPECT() *RateCache_Expecter {
	return &RateCache_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function for the type RateCache
func (_mock *RateCache) GetRate(ctx context.Context, key redis.RateKey) (*redis.Rate, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 *redis.Rate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, redis.RateKey) (*redis.Rate, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, redis.RateKey) *redis.Rate); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Rate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, redis.RateKey) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RateCache_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type RateCache_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - ctx context.Context
//   - key redis.RateKey
func (_e *RateCache_Expecter) GetRate(ctx interface{}, key interface{}) *RateCache_GetRate_Call {
	return &RateCache_GetRate_Call{Call: _e.mock.On("GetRate", ctx, key)}
}

func (_c *RateCache_GetRate_Call) Run(run func(ctx context.Context, key redis.RateKey)) *RateCache_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 redis.RateKey
		if args[1] != nil {
			arg1 = args[1].(redis.RateKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateCache_GetRate_Call) Return(rate *redis.Rate, err error) *RateCache_GetRate_Call {
	_c.Call.Return(rate, err)
	return _c
}

func (_c *RateCache_GetRate_Call) RunAndReturn(run func(ctx context.Context, key redis.RateKey) (*redis.Rate, error)) *RateCache_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// PutRate provides a mock function for the type RateCache
func (_mock *RateCache) PutRate(ctx context.Context, key redis.RateKey, value redis.Rate) error {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for PutRate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, redis.RateKey, redis.Rate) error); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RateCache_PutRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRate'
type RateCache_PutRate_Call struct {
	*mock.Call
}

// PutRate is a helper method to define mock.On call
//   - ctx context.Context
//   - key redis.RateKey
//   - value redis.Rate
func (_e *RateCache_Expecter) PutRate(ctx interface{}, key interface{}, value interface{}) *RateCache_PutRate_Call {
	return &RateCache_PutRate_Call{Call: _e.mock.On("PutRate", ctx, key, value)}
}

func (_c *RateCache_PutRate_Call) Run(run func(ctx context.Context, key redis.RateKey, value redis.Rate)) *RateCache_PutRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 redis.RateKey
		if args[1] != nil {
			arg1 = args[1].(redis.RateKey)
		}
		var arg2 redis.Rate
		if args[2] != nil {
			arg2 = args[2].(redis.Rate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RateCache_PutRate_Call) Return(err error) *RateCache_PutRate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RateCache_PutRate_Call) RunAndReturn(run func(ctx context.Context, key redis.RateKey, value redis.Rate) error) *RateCache_PutRate_Call {
	_c.Call.Return(run)
	return _c
}
