// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewProviderErrRateMetric creates a new instance of ProviderErrRateMetric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderErrRateMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderErrRateMetric {
	mock := &ProviderErrRateMetric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProviderErrRateMetric is an autogenerated mock type for the ProviderErrRateMetric type
type ProviderErrRateMetric struct {
	mock.Mock
}

type ProviderErrRateMetric_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderErrRateMetric) EXPECT() *ProviderErrRateMetric_Expecter {
	return &ProviderErrRateMetric_Expecter{mock: &_m.Mock}
}

// Inc provides a mock function for the type ProviderErrRateMetric
func (_mock *ProviderErrRateMetric) Inc(code int, provider entity.ProviderName) {
	_mock.Called(code, provider)
	return
}

// ProviderErrRateMetric_Inc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inc'
type ProviderErrRateMetric_Inc_Call struct {
	*mock.Call
}

// Inc is a helper method to define mock.On call
//   - code int
//   - provider entity.ProviderName
func (_e *ProviderErrRateMetric_Expecter) Inc(code interface{}, provider interface{}) *ProviderErrRateMetric_Inc_Call {
	return &ProviderErrRateMetric_Inc_Call{Call: _e.mock.On("Inc", code, provider)}
}

func (_c *ProviderErrRateMetric_Inc_Call) Run(run func(code int, provider entity.ProviderName)) *ProviderErrRateMetric_Inc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 entity.ProviderName
		if args[1] != nil {
			arg1 = args[1].(entity.ProviderName)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ProviderErrRateMetric_Inc_Call) Return() *ProviderErrRateMetric_Inc_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProviderErrRateMetric_Inc_Call) RunAndReturn(run func(code int, provider entity.ProviderName)) *ProviderErrRateMetric_Inc_Call {
	_c.Run(run)
	return _c
}
