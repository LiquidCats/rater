// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewCollectRateUseCase creates a new instance of CollectRateUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectRateUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectRateUseCase {
	mock := &CollectRateUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CollectRateUseCase is an autogenerated mock type for the CollectRateUseCase type
type CollectRateUseCase struct {
	mock.Mock
}

type CollectRateUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectRateUseCase) EXPECT() *CollectRateUseCase_Expecter {
	return &CollectRateUseCase_Expecter{mock: &_m.Mock}
}

// CollectRate provides a mock function for the type CollectRateUseCase
func (_mock *CollectRateUseCase) CollectRate(ctx context.Context, pair entity.Symbol) error {
	ret := _mock.Called(ctx, pair)

	if len(ret) == 0 {
		panic("no return value specified for CollectRate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Symbol) error); ok {
		r0 = returnFunc(ctx, pair)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CollectRateUseCase_CollectRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectRate'
type CollectRateUseCase_CollectRate_Call struct {
	*mock.Call
}

// CollectRate is a helper method to define mock.On call
//   - ctx context.Context
//   - pair entity.Symbol
func (_e *CollectRateUseCase_Expecter) CollectRate(ctx interface{}, pair interface{}) *CollectRateUseCase_CollectRate_Call {
	return &CollectRateUseCase_CollectRate_Call{Call: _e.mock.On("CollectRate", ctx, pair)}
}

func (_c *CollectRateUseCase_CollectRate_Call) Run(run func(ctx context.Context, pair entity.Symbol)) *CollectRateUseCase_CollectRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entity.Symbol
		if args[1] != nil {
			arg1 = args[1].(entity.Symbol)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CollectRateUseCase_CollectRate_Call) Return(err error) *CollectRateUseCase_CollectRate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CollectRateUseCase_CollectRate_Call) RunAndReturn(run func(ctx context.Context, pair entity.Symbol) error) *CollectRateUseCase_CollectRate_Call {
	_c.Call.Return(run)
	return _c
}
