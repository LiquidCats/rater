// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LiquidCats/rater/internal/adapter/repository/database/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewProviderDatabase creates a new instance of ProviderDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderDatabase {
	mock := &ProviderDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProviderDatabase is an autogenerated mock type for the ProviderDatabase type
type ProviderDatabase struct {
	mock.Mock
}

type ProviderDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderDatabase) EXPECT() *ProviderDatabase_Expecter {
	return &ProviderDatabase_Expecter{mock: &_m.Mock}
}

// GetAllProviders provides a mock function for the type ProviderDatabase
func (_mock *ProviderDatabase) GetAllProviders(ctx context.Context) ([]postgres.Provider, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProviders")
	}

	var r0 []postgres.Provider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]postgres.Provider, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []postgres.Provider); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.Provider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProviderDatabase_GetAllProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProviders'
type ProviderDatabase_GetAllProviders_Call struct {
	*mock.Call
}

// GetAllProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProviderDatabase_Expecter) GetAllProviders(ctx interface{}) *ProviderDatabase_GetAllProviders_Call {
	return &ProviderDatabase_GetAllProviders_Call{Call: _e.mock.On("GetAllProviders", ctx)}
}

func (_c *ProviderDatabase_GetAllProviders_Call) Run(run func(ctx context.Context)) *ProviderDatabase_GetAllProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ProviderDatabase_GetAllProviders_Call) Return(providers []postgres.Provider, err error) *ProviderDatabase_GetAllProviders_Call {
	_c.Call.Return(providers, err)
	return _c
}

func (_c *ProviderDatabase_GetAllProviders_Call) RunAndReturn(run func(ctx context.Context) ([]postgres.Provider, error)) *ProviderDatabase_GetAllProviders_Call {
	_c.Call.Return(run)
	return _c
}
