// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewPairRegistry creates a new instance of PairRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPairRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *PairRegistry {
	mock := &PairRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PairRegistry is an autogenerated mock type for the PairRegistry type
type PairRegistry struct {
	mock.Mock
}

type PairRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *PairRegistry) EXPECT() *PairRegistry_Expecter {
	return &PairRegistry_Expecter{mock: &_m.Mock}
}

// GetAllPairs provides a mock function for the type PairRegistry
func (_mock *PairRegistry) GetAllPairs() []entity.Pair {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPairs")
	}

	var r0 []entity.Pair
	if returnFunc, ok := ret.Get(0).(func() []entity.Pair); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pair)
		}
	}
	return r0
}

// PairRegistry_GetAllPairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPairs'
type PairRegistry_GetAllPairs_Call struct {
	*mock.Call
}

// GetAllPairs is a helper method to define mock.On call
func (_e *PairRegistry_Expecter) GetAllPairs() *PairRegistry_GetAllPairs_Call {
	return &PairRegistry_GetAllPairs_Call{Call: _e.mock.On("GetAllPairs")}
}

func (_c *PairRegistry_GetAllPairs_Call) Run(run func()) *PairRegistry_GetAllPairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PairRegistry_GetAllPairs_Call) Return(pairs []entity.Pair) *PairRegistry_GetAllPairs_Call {
	_c.Call.Return(pairs)
	return _c
}

func (_c *PairRegistry_GetAllPairs_Call) RunAndReturn(run func() []entity.Pair) *PairRegistry_GetAllPairs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPair provides a mock function for the type PairRegistry
func (_mock *PairRegistry) GetPair(symbol entity.Symbol) (entity.Pair, bool) {
	ret := _mock.Called(symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetPair")
	}

	var r0 entity.Pair
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(entity.Symbol) (entity.Pair, bool)); ok {
		return returnFunc(symbol)
	}
	if returnFunc, ok := ret.Get(0).(func(entity.Symbol) entity.Pair); ok {
		r0 = returnFunc(symbol)
	} else {
		r0 = ret.Get(0).(entity.Pair)
	}
	if returnFunc, ok := ret.Get(1).(func(entity.Symbol) bool); ok {
		r1 = returnFunc(symbol)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// PairRegistry_GetPair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPair'
type PairRegistry_GetPair_Call struct {
	*mock.Call
}

// GetPair is a helper method to define mock.On call
//   - symbol entity.Symbol
func (_e *PairRegistry_Expecter) GetPair(symbol interface{}) *PairRegistry_GetPair_Call {
	return &PairRegistry_GetPair_Call{Call: _e.mock.On("GetPair", symbol)}
}

func (_c *PairRegistry_GetPair_Call) Run(run func(symbol entity.Symbol)) *PairRegistry_GetPair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 entity.Symbol
		if args[0] != nil {
			arg0 = args[0].(entity.Symbol)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PairRegistry_GetPair_Call) Return(pair entity.Pair, b bool) *PairRegistry_GetPair_Call {
	_c.Call.Return(pair, b)
	return _c
}

func (_c *PairRegistry_GetPair_Call) RunAndReturn(run func(symbol entity.Symbol) (entity.Pair, bool)) *PairRegistry_GetPair_Call {
	_c.Call.Return(run)
	return _c
}
