// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LiquidCats/rater/internal/adapter/repository/database/postgres"
	mock "github.com/stretchr/testify/mock"
)

// NewRateDatabase creates a new instance of RateDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateDatabase {
	mock := &RateDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RateDatabase is an autogenerated mock type for the RateDatabase type
type RateDatabase struct {
	mock.Mock
}

type RateDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *RateDatabase) EXPECT() *RateDatabase_Expecter {
	return &RateDatabase_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function for the type RateDatabase
func (_mock *RateDatabase) GetRate(ctx context.Context, arg postgres.GetRateParams) (postgres.Rate, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 postgres.Rate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.GetRateParams) (postgres.Rate, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.GetRateParams) postgres.Rate); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.Rate)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.GetRateParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RateDatabase_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type RateDatabase_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.GetRateParams
func (_e *RateDatabase_Expecter) GetRate(ctx interface{}, arg interface{}) *RateDatabase_GetRate_Call {
	return &RateDatabase_GetRate_Call{Call: _e.mock.On("GetRate", ctx, arg)}
}

func (_c *RateDatabase_GetRate_Call) Run(run func(ctx context.Context, arg postgres.GetRateParams)) *RateDatabase_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.GetRateParams
		if args[1] != nil {
			arg1 = args[1].(postgres.GetRateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateDatabase_GetRate_Call) Return(rate postgres.Rate, err error) *RateDatabase_GetRate_Call {
	_c.Call.Return(rate, err)
	return _c
}

func (_c *RateDatabase_GetRate_Call) RunAndReturn(run func(ctx context.Context, arg postgres.GetRateParams) (postgres.Rate, error)) *RateDatabase_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// HasRate provides a mock function for the type RateDatabase
func (_mock *RateDatabase) HasRate(ctx context.Context, arg postgres.HasRateParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for HasRate")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.HasRateParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.HasRateParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.HasRateParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RateDatabase_HasRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRate'
type RateDatabase_HasRate_Call struct {
	*mock.Call
}

// HasRate is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.HasRateParams
func (_e *RateDatabase_Expecter) HasRate(ctx interface{}, arg interface{}) *RateDatabase_HasRate_Call {
	return &RateDatabase_HasRate_Call{Call: _e.mock.On("HasRate", ctx, arg)}
}

func (_c *RateDatabase_HasRate_Call) Run(run func(ctx context.Context, arg postgres.HasRateParams)) *RateDatabase_HasRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.HasRateParams
		if args[1] != nil {
			arg1 = args[1].(postgres.HasRateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateDatabase_HasRate_Call) Return(b bool, err error) *RateDatabase_HasRate_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *RateDatabase_HasRate_Call) RunAndReturn(run func(ctx context.Context, arg postgres.HasRateParams) (bool, error)) *RateDatabase_HasRate_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRate provides a mock function for the type RateDatabase
func (_mock *RateDatabase) SaveRate(ctx context.Context, arg postgres.SaveRateParams) (postgres.Rate, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SaveRate")
	}

	var r0 postgres.Rate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.SaveRateParams) (postgres.Rate, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, postgres.SaveRateParams) postgres.Rate); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(postgres.Rate)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, postgres.SaveRateParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RateDatabase_SaveRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRate'
type RateDatabase_SaveRate_Call struct {
	*mock.Call
}

// SaveRate is a helper method to define mock.On call
//   - ctx context.Context
//   - arg postgres.SaveRateParams
func (_e *RateDatabase_Expecter) SaveRate(ctx interface{}, arg interface{}) *RateDatabase_SaveRate_Call {
	return &RateDatabase_SaveRate_Call{Call: _e.mock.On("SaveRate", ctx, arg)}
}

func (_c *RateDatabase_SaveRate_Call) Run(run func(ctx context.Context, arg postgres.SaveRateParams)) *RateDatabase_SaveRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 postgres.SaveRateParams
		if args[1] != nil {
			arg1 = args[1].(postgres.SaveRateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateDatabase_SaveRate_Call) Return(rate postgres.Rate, err error) *RateDatabase_SaveRate_Call {
	_c.Call.Return(rate, err)
	return _c
}

func (_c *RateDatabase_SaveRate_Call) RunAndReturn(run func(ctx context.Context, arg postgres.SaveRateParams) (postgres.Rate, error)) *RateDatabase_SaveRate_Call {
	_c.Call.Return(run)
	return _c
}
