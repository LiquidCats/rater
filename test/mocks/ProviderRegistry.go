// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewProviderRegistry creates a new instance of ProviderRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderRegistry {
	mock := &ProviderRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProviderRegistry is an autogenerated mock type for the ProviderRegistry type
type ProviderRegistry struct {
	mock.Mock
}

type ProviderRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderRegistry) EXPECT() *ProviderRegistry_Expecter {
	return &ProviderRegistry_Expecter{mock: &_m.Mock}
}

// GetAllProviders provides a mock function for the type ProviderRegistry
func (_mock *ProviderRegistry) GetAllProviders() []entity.Provider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProviders")
	}

	var r0 []entity.Provider
	if returnFunc, ok := ret.Get(0).(func() []entity.Provider); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Provider)
		}
	}
	return r0
}

// ProviderRegistry_GetAllProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProviders'
type ProviderRegistry_GetAllProviders_Call struct {
	*mock.Call
}

// GetAllProviders is a helper method to define mock.On call
func (_e *ProviderRegistry_Expecter) GetAllProviders() *ProviderRegistry_GetAllProviders_Call {
	return &ProviderRegistry_GetAllProviders_Call{Call: _e.mock.On("GetAllProviders")}
}

func (_c *ProviderRegistry_GetAllProviders_Call) Run(run func()) *ProviderRegistry_GetAllProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProviderRegistry_GetAllProviders_Call) Return(providers []entity.Provider) *ProviderRegistry_GetAllProviders_Call {
	_c.Call.Return(providers)
	return _c
}

func (_c *ProviderRegistry_GetAllProviders_Call) RunAndReturn(run func() []entity.Provider) *ProviderRegistry_GetAllProviders_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function for the type ProviderRegistry
func (_mock *ProviderRegistry) GetProvider(name entity.ProviderName) (entity.Provider, bool) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 entity.Provider
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(entity.ProviderName) (entity.Provider, bool)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(entity.ProviderName) entity.Provider); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(entity.Provider)
	}
	if returnFunc, ok := ret.Get(1).(func(entity.ProviderName) bool); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// ProviderRegistry_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type ProviderRegistry_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//   - name entity.ProviderName
func (_e *ProviderRegistry_Expecter) GetProvider(name interface{}) *ProviderRegistry_GetProvider_Call {
	return &ProviderRegistry_GetProvider_Call{Call: _e.mock.On("GetProvider", name)}
}

func (_c *ProviderRegistry_GetProvider_Call) Run(run func(name entity.ProviderName)) *ProviderRegistry_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 entity.ProviderName
		if args[0] != nil {
			arg0 = args[0].(entity.ProviderName)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ProviderRegistry_GetProvider_Call) Return(provider entity.Provider, b bool) *ProviderRegistry_GetProvider_Call {
	_c.Call.Return(provider, b)
	return _c
}

func (_c *ProviderRegistry_GetProvider_Call) RunAndReturn(run func(name entity.ProviderName) (entity.Provider, bool)) *ProviderRegistry_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}
