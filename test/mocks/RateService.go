// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewRateService creates a new instance of RateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateService {
	mock := &RateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RateService is an autogenerated mock type for the RateService type
type RateService struct {
	mock.Mock
}

type RateService_Expecter struct {
	mock *mock.Mock
}

func (_m *RateService) EXPECT() *RateService_Expecter {
	return &RateService_Expecter{mock: &_m.Mock}
}

// Current provides a mock function for the type RateService
func (_mock *RateService) Current(ctx context.Context, pair entity.Pair) (*entity.Rate, entity.ProviderName, error) {
	ret := _mock.Called(ctx, pair)

	if len(ret) == 0 {
		panic("no return value specified for Current")
	}

	var r0 *entity.Rate
	var r1 entity.ProviderName
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Pair) (*entity.Rate, entity.ProviderName, error)); ok {
		return returnFunc(ctx, pair)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Pair) *entity.Rate); ok {
		r0 = returnFunc(ctx, pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Rate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.Pair) entity.ProviderName); ok {
		r1 = returnFunc(ctx, pair)
	} else {
		r1 = ret.Get(1).(entity.ProviderName)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, entity.Pair) error); ok {
		r2 = returnFunc(ctx, pair)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// RateService_Current_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Current'
type RateService_Current_Call struct {
	*mock.Call
}

// Current is a helper method to define mock.On call
//   - ctx context.Context
//   - pair entity.Pair
func (_e *RateService_Expecter) Current(ctx interface{}, pair interface{}) *RateService_Current_Call {
	return &RateService_Current_Call{Call: _e.mock.On("Current", ctx, pair)}
}

func (_c *RateService_Current_Call) Run(run func(ctx context.Context, pair entity.Pair)) *RateService_Current_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entity.Pair
		if args[1] != nil {
			arg1 = args[1].(entity.Pair)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateService_Current_Call) Return(rate *entity.Rate, providerName entity.ProviderName, err error) *RateService_Current_Call {
	_c.Call.Return(rate, providerName, err)
	return _c
}

func (_c *RateService_Current_Call) RunAndReturn(run func(ctx context.Context, pair entity.Pair) (*entity.Rate, entity.ProviderName, error)) *RateService_Current_Call {
	_c.Call.Return(run)
	return _c
}

// Historical provides a mock function for the type RateService
func (_mock *RateService) Historical(ctx context.Context, pair entity.Pair, ts time.Time) (*entity.Rate, error) {
	ret := _mock.Called(ctx, pair, ts)

	if len(ret) == 0 {
		panic("no return value specified for Historical")
	}

	var r0 *entity.Rate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Pair, time.Time) (*entity.Rate, error)); ok {
		return returnFunc(ctx, pair, ts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Pair, time.Time) *entity.Rate); ok {
		r0 = returnFunc(ctx, pair, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Rate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.Pair, time.Time) error); ok {
		r1 = returnFunc(ctx, pair, ts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RateService_Historical_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Historical'
type RateService_Historical_Call struct {
	*mock.Call
}

// Historical is a helper method to define mock.On call
//   - ctx context.Context
//   - pair entity.Pair
//   - ts time.Time
func (_e *RateService_Expecter) Historical(ctx interface{}, pair interface{}, ts interface{}) *RateService_Historical_Call {
	return &RateService_Historical_Call{Call: _e.mock.On("Historical", ctx, pair, ts)}
}

func (_c *RateService_Historical_Call) Run(run func(ctx context.Context, pair entity.Pair, ts time.Time)) *RateService_Historical_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entity.Pair
		if args[1] != nil {
			arg1 = args[1].(entity.Pair)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RateService_Historical_Call) Return(rate *entity.Rate, err error) *RateService_Historical_Call {
	_c.Call.Return(rate, err)
	return _c
}

func (_c *RateService_Historical_Call) RunAndReturn(run func(ctx context.Context, pair entity.Pair, ts time.Time) (*entity.Rate, error)) *RateService_Historical_Call {
	_c.Call.Return(run)
	return _c
}
