// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewResponseTimeMetric creates a new instance of ResponseTimeMetric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseTimeMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseTimeMetric {
	mock := &ResponseTimeMetric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResponseTimeMetric is an autogenerated mock type for the ResponseTimeMetric type
type ResponseTimeMetric struct {
	mock.Mock
}

type ResponseTimeMetric_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseTimeMetric) EXPECT() *ResponseTimeMetric_Expecter {
	return &ResponseTimeMetric_Expecter{mock: &_m.Mock}
}

// Observe provides a mock function for the type ResponseTimeMetric
func (_mock *ResponseTimeMetric) Observe(route string, start time.Time) {
	_mock.Called(route, start)
	return
}

// ResponseTimeMetric_Observe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Observe'
type ResponseTimeMetric_Observe_Call struct {
	*mock.Call
}

// Observe is a helper method to define mock.On call
//   - route string
//   - start time.Time
func (_e *ResponseTimeMetric_Expecter) Observe(route interface{}, start interface{}) *ResponseTimeMetric_Observe_Call {
	return &ResponseTimeMetric_Observe_Call{Call: _e.mock.On("Observe", route, start)}
}

func (_c *ResponseTimeMetric_Observe_Call) Run(run func(route string, start time.Time)) *ResponseTimeMetric_Observe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResponseTimeMetric_Observe_Call) Return() *ResponseTimeMetric_Observe_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResponseTimeMetric_Observe_Call) RunAndReturn(run func(route string, start time.Time)) *ResponseTimeMetric_Observe_Call {
	_c.Run(run)
	return _c
}
