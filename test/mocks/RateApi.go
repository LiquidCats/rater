// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	entity "github.com/LiquidCats/rater/internal/app/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// RateApi is an autogenerated mock type for the RateApi type
type RateApi struct {
	mock.Mock
}

// GetRate provides a mock function with given fields: ctx, pair
func (_m *RateApi) GetRate(ctx context.Context, pair entity.Pair) (big.Float, error) {
	ret := _m.Called(ctx, pair)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 big.Float
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pair) (big.Float, error)); ok {
		return rf(ctx, pair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pair) big.Float); ok {
		r0 = rf(ctx, pair)
	} else {
		r0 = ret.Get(0).(big.Float)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Pair) error); ok {
		r1 = rf(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRateApi creates a new instance of RateApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateApi {
	mock := &RateApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
