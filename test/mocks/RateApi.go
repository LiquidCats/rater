// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/LiquidCats/rater/internal/app/domain/entity"
	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"
)

// RateAPI is an autogenerated mock type for the RateAPI type
type RateAPI struct {
	mock.Mock
}

// GetRate provides a mock function with given fields: ctx, pair
func (_m *RateAPI) GetRate(ctx context.Context, pair entity.Pair) (decimal.Decimal, error) {
	ret := _m.Called(ctx, pair)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pair) (decimal.Decimal, error)); ok {
		return rf(ctx, pair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pair) decimal.Decimal); ok {
		r0 = rf(ctx, pair)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Pair) error); ok {
		r1 = rf(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRateAPI creates a new instance of RateAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateAPI {
	mock := &RateAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
