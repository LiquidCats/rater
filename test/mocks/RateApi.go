// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/LiquidCats/rater/internal/app/domain/entity"
	"github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
)

// NewRateAPI creates a new instance of RateAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateAPI {
	mock := &RateAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RateAPI is an autogenerated mock type for the RateAPI type
type RateAPI struct {
	mock.Mock
}

type RateAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *RateAPI) EXPECT() *RateAPI_Expecter {
	return &RateAPI_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function for the type RateAPI
func (_mock *RateAPI) GetRate(ctx context.Context, pair entity.Pair) (decimal.Decimal, error) {
	ret := _mock.Called(ctx, pair)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 decimal.Decimal
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Pair) (decimal.Decimal, error)); ok {
		return returnFunc(ctx, pair)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entity.Pair) decimal.Decimal); ok {
		r0 = returnFunc(ctx, pair)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entity.Pair) error); ok {
		r1 = returnFunc(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RateAPI_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type RateAPI_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - ctx context.Context
//   - pair entity.Pair
func (_e *RateAPI_Expecter) GetRate(ctx interface{}, pair interface{}) *RateAPI_GetRate_Call {
	return &RateAPI_GetRate_Call{Call: _e.mock.On("GetRate", ctx, pair)}
}

func (_c *RateAPI_GetRate_Call) Run(run func(ctx context.Context, pair entity.Pair)) *RateAPI_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entity.Pair
		if args[1] != nil {
			arg1 = args[1].(entity.Pair)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RateAPI_GetRate_Call) Return(decimal1 decimal.Decimal, err error) *RateAPI_GetRate_Call {
	_c.Call.Return(decimal1, err)
	return _c
}

func (_c *RateAPI_GetRate_Call) RunAndReturn(run func(ctx context.Context, pair entity.Pair) (decimal.Decimal, error)) *RateAPI_GetRate_Call {
	_c.Call.Return(run)
	return _c
}
